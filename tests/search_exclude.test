<?php
/**
 * @file
 * SimpleTest class with unit tests 
 */

/**
 * Import Search Exclude namespaces 
 */
use DrupalModule\Search\SearchExclude as SearchExclude;

/**
 * Search Exclude Test Cases
 *
 * @author Michel Felipe
 */
class SearchExcludeTest extends DrupalFixtureTestCase {
    
    public static function getInfo() {
        
        return array(
            'name' => 'Search Exclude Content Types Test',
            'description' => 'Tests for content types excludes from search index',
            'group' => 'Search Exclude'
        );
    }
    
    /**
     * Check if default status message
     * of node module is different of
     * search exclude status.
     * 
     * @see node_search_status()
     * @see SearchExclude::getData()
     */
    public function testStatusExcludeContentTypes() {
        
        $status = new SearchExclude\Status();
        $result = $status->getData('page');
         
        $nodeRs = module_invoke('node', 'search_status');

        $this->assertTrue($nodeRs['total'] > $result['total'], 
                          t('The default Node Status is greater than Search Exclude')
                         );
        
    }
    
    /**
     * @todo Checks because hook_update_index don't run by unit tests 
     */
    public function testUpdateIndexExclude() {

        $search = new SearchExclude();
        
        $status = new SearchExclude\Status();
        $resultbefore = $status->getData('page');
        
        $search->updateIndex();
        
        $resultafter = $status->getData('page');

        $placeholders = array(
            '@origin' => $resultbefore['remaining'],
            '@after' => $resultafter['remaining']
        );
        
        $this->assertTrue($resultbefore['remaining'] != $resultafter['remaining'], t('Content types indexed. Original:@origin After Indexing:@after', $placeholders));
    }
}