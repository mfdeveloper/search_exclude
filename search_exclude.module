<?php

/**
 * @file
 * Main drupal hooks implementations
 * In most of cases on this version, 
 * the hooks is only a trigger for 
 * class methods of 'library' folder 
 */
use DrupalModule\Search\SearchExclude as SearchExclude;

/**
 * Implements hook_boot();
 * 
 * Define a basic namespace autoload based
 * on psr-0
 * 
 * @link http://php.net/manual/en/function.spl-autoload-register.php spl_autoload_register()
 */
function search_exclude_boot() {
    
    spl_autoload_register(function($class) {
        
        if (strpos($class, 'DrupalModule') !== FALSE) {
            
            if (version_compare(PHP_VERSION, '5.3') >= 0) {

                //Create a finder with namespace support.
                               
                $class = str_replace('\\', '/', $class);  
            } 
            else {
                
                // Create a finder without namespaces support.
                $class = str_replace('_', '/', $class);
            } 
            require_once 'library/' . $class . '.php';
        }
    });
}

/**
 * Implements hook_help();
 */
function search_exclude_help($path, $arg) {
    
    switch ($path) {
      case 'admin/help#search_exclude':
        return file_get_contents(dirname(__FILE__) . "/README.txt");
  }
}


/**
 * Implements hook_search_info().
 * 
 * Call node_search_info() hook
 * defined in node.module
 * 
 * @see node_search_info()
 */
function search_exclude_search_info() {
    
  return module_invoke('node', 'search_info');
}

/**
 * Implements hook_search_reset().
 * 
 * Call node_search_reset() hook
 * defined in node.module
 * 
 * @see node_search_reset()
 */
function search_exclude_search_reset() {
  
    module_invoke('node', 'search_reset');
}

/**
 * Implements hook_search_admin().
 * 
 * Call node_search_admin() hook
 * defined in node.module
 * 
 * @see node_search_admin()
 */
function search_exclude_search_admin() {
  
    return module_invoke('node', 'search_admin');
}

/**
 * Implements hook_search_execute().
 * 
 * Call node_search_execute() hook
 * defined in node.module
 * 
 * @see node_search_execute() 
 */
function search_exclude_search_execute($keys = NULL, $conditions = NULL) {
  
    return module_invoke('node', 'search_execute', $keys, $conditions);
}

/**
 * Implements hook_search_status().
 * 
 * Verify 'search_exclude_content_types'
 * variable and remove them from
 * 'total' and 'remaining' values of
 * indexing.
 * 
 * The query's that count this values was inspired
 * by node_search_status() but modified with 
 * hook_query_TAG_alter() and optional params 
 * for custom conditions, using db_select() function.
 * 
 * @see SearchExclude::getData()
 */
function search_exclude_search_status() {
    
    $search = new SearchExclude\Status();
    return $search->getData();
            
}

/**
 * Implements hook_update_index().
 * 
 * Update all index except the content types
 * saved on 'search_exclude_content_types'
 * variable
 * 
 * @see SearchExclude::updateIndex()
 */
function search_exclude_update_index() {
    
  $search = new SearchExclude();
  $search->updateIndex();
}

/**
 * Implements hook_query_TAG_alter();
 * 
 * Verify the 'search_exclude_content_types'
 * variable value and add them NOT IN condition 
 * on load admin search configs page
 * 
 * @see search_exclude_search_status()
 * @see SearchExclude\Status::changeTotal()
 */
function search_exclude_query_node_search_status_total_alter(QueryAlterableInterface $query) {
    
    $status = new SearchExclude\Status();
    $status->changeTotal($query);
}

/**
 * Implements hook_query_TAG_alter();
 * 
 * Verify the 'search_exclude_content_types'
 * value and add them NOT IN condition on load 
 * admin search configs page
 * 
 * @see search_exclude_search_status()
 * @see SearchExclude\Status::changeRemaining()
 */
function search_exclude_query_node_search_status_remaining_alter(QueryAlterableInterface &$query) {
    
    $status = new SearchExclude\Status();
    $status->changeRemaining($query);
}

/**
 * Implements hook_form_FORM_ID_alter();
 * 
 * Change the 'search_admin_settings' form on#
 * configuration admin menu. Add 'Update status'
 * and 'Run indexing' actions
 * 
 * @see SearchExclude
 * @see SearchExclude\Form\AdminSettings
 */
function search_exclude_form_search_admin_settings_alter(&$form, &$form_state, $form_id) {

   $search = new SearchExclude();
   $data = $search->form($form, $form_state)->change();
   
   extract($data);
}